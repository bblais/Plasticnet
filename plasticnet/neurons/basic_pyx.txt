from plasticnet cimport *
cimport cython
import pylab
import sys

cdef int randint(int N):
    return <int> (randu()*N)

import numpy as np
cimport numpy as np

def hdf5_load_images(fname):
    import h5py,os
    
    if not os.path.exists(fname):
        raise ValueError,"File does not exist: %s" % fname
    f=h5py.File(fname,'r')
    var={}
    var['im_scale_shift']=list(f.attrs['im_scale_shift'])
    N=len(f.keys())
    var['im']=[]
    for i in range(N):
        var['im'].append(np.array(f['image%d' % i]))

    f.close()

    return var


cdef class pattern_neuron(neuron):
    cdef public int sequential
    cdef public int pattern_number
    cdef public np.ndarray patterns
    cdef public np.ndarray pattern
    cdef int number_of_patterns
    cdef public double time_between_patterns,time_to_next_pattern
    
    cpdef _reset(self):
        neuron._reset(self)
        self.time_to_next_pattern=0.0 
        self.pattern_number=-1      
        
    def __init__(self,patterns,time_between_patterns=1.0,sequential=False,shape=None,verbose=False):
        self.patterns=np.ascontiguousarray(np.atleast_2d(np.array(patterns,np.float)))
        if not shape is None:
            self.patterns=self.patterns.reshape(shape)
        
        self.sequential=sequential
        neuron.__init__(self,self.patterns.shape[1]) # number of neurons
        self.number_of_patterns=self.patterns.shape[0]
        self.time_between_patterns=time_between_patterns
        self.verbose=verbose
        
        self._reset()
        self.new_buffer(-1)
        
    cpdef new_buffer(self,double t):
        pass
        
    cpdef new_pattern(self,double t):
        if not self.sequential:
            if self.verbose:
                print "random"
            self.pattern_number=<int> (randu()*self.number_of_patterns)
        else:
            if self.verbose:
                print "sequential"
            self.pattern_number+=1
            if self.pattern_number>=self.number_of_patterns:
                self.new_buffer(t)
                self.pattern_number=0
                
        self.pattern=self.patterns[self.pattern_number]

        self.time_to_next_pattern=t+self.time_between_patterns
        if self.verbose:
            print "New pattern %d" % self.pattern_number
            self.print_pattern()
            print "Time to next pattern: %f" % self.time_to_next_pattern
        
    def print_pattern(self):
        cdef int i
        cdef double *pattern=<double *>self.pattern.data
        for i in range(self.N):
            print pattern[i]
            

    @cython.cdivision(True)
    @cython.boundscheck(False) # turn of bounds-checking for entire function
    cpdef update(self,double t,simulation sim):
        cdef double r
        cdef int i,j
        cdef double *y=<double *>self.linear_output.data
        cdef double *z=<double *>self.output.data
        cdef double *pattern
        
        if t>=(self.time_to_next_pattern-1e-6):  # the 1e-6 is because of binary represenation offsets
            self.new_pattern(t)
        pattern=<double *>self.pattern.data    
        
        for i in range(self.N):
            y[i]=pattern[i]
            z[i]=pattern[i]
      

def dot(what="."):
    print what,
    sys.stdout.flush()

cdef class natural_images(pattern_neuron):
    cdef public int rf_size,buffer_size
    cdef public object pics,im
    cdef int number_of_pics
    cdef int p,r,c
    cdef int use_other_channel
    cdef natural_images other_channel
    
    cpdef _reset(self):
        pattern_neuron._reset(self)
        self.p=self.r=self.c=-1
        
    def __init__(self,fname='hdf5/bbsk081604_norm.hdf5',rf_size=13,
                     time_between_patterns=1.0,other_channel=None,verbose=False,
                     ):

        self.sequential=True
        self.pics=fname
        self.rf_size=rf_size
        if not other_channel is None:
            self.other_channel=<natural_images>other_channel
            self.use_other_channel=True
        else:
            self.use_other_channel=False

        image_data=hdf5_load_images(fname)
        self.im=[arr.astype(float)*image_data['im_scale_shift'][0]+image_data['im_scale_shift'][1] 
                                for arr in image_data['im']]
        del image_data
        
        pattern_neuron.__init__(self,np.zeros((1,rf_size*rf_size),np.float),
                            time_between_patterns=time_between_patterns,sequential=True,verbose=verbose)
    
    
        self.pattern=self.patterns[0]
        
        if verbose:
            print "Read %d images from %s" % (len(self.im),fname)
            for im in self.im:
                print "[%d,%d]" % (im.shape[0],im.shape[1]),
            sys.stdout.flush()
    
    cpdef new_pattern(self,double t):
        cdef int i,j,k,num_rows,num_cols,r,c,p,offset,count
        cdef np.ndarray pic
        cdef double *pic_ptr
        cdef double *pattern
                
        pattern=<double *>self.pattern.data    
                
        cdef int number_of_pictures=len(self.im)
                
        if not self.use_other_channel:
            p=randint(number_of_pictures)
        else:
            p=self.other_channel.p % number_of_pictures
        
        pic=self.im[p]
        pic_ptr=<double *> pic.data
            
        num_rows,num_cols=pic.shape[0],pic.shape[1]
        
        if not self.use_other_channel:
            r,c=randint(num_rows-self.rf_size),randint(num_cols-self.rf_size)
        else:
            r,c=self.other_channel.r,self.other_channel.c
            
        if self.verbose:
            print p,r,c

        self.p=p
        self.c=c
        self.r=r

        count=0
        for i in range(self.rf_size):
            for j in range(self.rf_size):
                offset=(r+i)*num_cols+(c+j)
                
                pattern[count]=pic_ptr[offset]
                count+=1
                if self.verbose:
                    print "[%d,%d]" % (offset,count),
                    sys.stdout.flush()

        if self.verbose:
            print            
            sys.stdout.flush()

        self.time_to_next_pattern=t+self.time_between_patterns
        if self.verbose:
            print "New pattern t=%f" % t
            self.print_pattern()
            print "Time to next pattern: %f" % self.time_to_next_pattern
            sys.stdout.flush()
    
    

cdef class linear_neuron(neuron):
    @cython.cdivision(True)
    @cython.boundscheck(False) # turn of bounds-checking for entire function
    cpdef update(self,double t,simulation sim):
        cdef neuron pre
        cdef connection c
    
        cdef double *x
        cdef double *y=<double *>self.linear_output.data
        cdef double *z=<double *>self.output.data
        cdef double *w    #=<double *>c.w.data
        cdef int i,j
        
        for i in range(self.N):
            y[i]=0.0
            
        for c in self.connections_pre:
            pre=c.pre
            w=c.w
            x=<double *>pre.output.data
            for j in range(pre.N):
                for i in range(self.N):
                    y[i]+=x[j]*w[i*pre.N+j]
                    
        for i in range(self.N):
            z[i]=y[i]
    